name: PR checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  lint-build-and-test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "STAGE=pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: eu-central-1

      - uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm i

      - name: Lint
        run: pnpm lint

      - name: Format
        run: pnpm format:check

      - name: Build
        run: pnpm build --stage ${{ env.STAGE }}

      - name: SIB
        run: pnpm sib --pipeline

      - name: Set secrets
        run: |
          npx sst secrets set SLACK_LOG_LEVEL "${{ secrets.SLACK_LOG_LEVEL_TEST }}" --stage ${{ env.STAGE }}
          npx sst secrets set SLACK_BOT_TOKEN "${{ secrets.SLACK_BOT_TOKEN_TEST }}" --stage ${{ env.STAGE }}
          npx sst secrets set SLACK_SIGNING_SECRET "${{ secrets.SLACK_SIGNING_SECRET_TEST }}" --stage ${{ env.STAGE }}
          npx sst secrets set CORE_SLACK_CHANNEL_ID "${{ secrets.CORE_SLACK_CHANNEL_ID_TEST }}" --stage ${{ env.STAGE }}
          npx sst secrets set RANDOM_SLACK_CHANNEL_ID "${{ secrets.RANDOM_SLACK_CHANNEL_ID_TEST }}" --stage ${{ env.STAGE }}
          npx sst secrets set ADMIN_SLACK_USER_ID "${{ secrets.SLACK_USER_ID_TEST }}" --stage ${{ env.STAGE }}
          npx sst secrets set DEPUTY_ADMIN_SLACK_USER_ID "${{ secrets.SLACK_USER_ID_TEST }}" --stage ${{ env.STAGE }}

      - name: Deploy stack
        run: pnpm run deploy --stage ${{ env.STAGE }}

      - name: Extract stack outputs
        id: sst-output
        run: |
          URL=$(jq -r '.["${{env.STAGE}}-birthday-slack-bot-MyStack"].ApiEndpoint' .sst/outputs.json)
          echo "apiEndpoint=$URL" >> "$GITHUB_OUTPUT"
          MIGRATION_FUNCTION=$(jq -r '.["${{env.STAGE}}-birthday-slack-bot-MyStack"].MigrationFunctionName' .sst/outputs.json)
          echo "migrationFunction=$MIGRATION_FUNCTION" >> "$GITHUB_OUTPUT"
          SECRET_ARN=$(jq -r '.["${{env.STAGE}}-birthday-slack-bot-StorageStack"].RDS_SECRET_ARN' .sst/outputs.json)
          echo "secretArn=$SECRET_ARN" >> "$GITHUB_OUTPUT"
          INSTANCE_ARN=$(jq -r '.["${{env.STAGE}}-birthday-slack-bot-StorageStack"].RDS_INSTANCE_ARN' .sst/outputs.json)
          echo "instanceArn=$INSTANCE_ARN" >> "$GITHUB_OUTPUT"
          DATABASE=$(jq -r '.["${{env.STAGE}}-birthday-slack-bot-StorageStack"].RDS_DATABASE' .sst/outputs.json)
          echo "database=$DATABASE" >> "$GITHUB_OUTPUT"

      - name: Migration
        run: pnpm migration:ci ${{ steps.sst-output.outputs.migrationFunction }}

      - name: Run tests
        run: pnpm test:ci
        env:
          VITE_API_URL: ${{ steps.sst-output.outputs.apiEndpoint }}
          VITE_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN_TEST }}
          VITE_SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET_TEST }}
          VITE_SLACK_USER_ID: ${{ secrets.SLACK_USER_ID_TEST }}
          VITE_SLACK_BOT_USER_ID: ${{ secrets.SLACK_BOT_USER_ID_TEST }}
          VITE_CORE_SLACK_CHANNEL_ID: ${{ secrets.CORE_SLACK_CHANNEL_ID_TEST }}
          VITE_RANDOM_SLACK_CHANNEL_ID: ${{ secrets.RANDOM_SLACK_CHANNEL_ID_TEST }}
          VITE_SLACK_DM_ID: ${{ secrets.SLACK_DM_ID_TEST }}
          VITE_SLACK_TEAM_ID: ${{ secrets.SLACK_TEAM_ID_TEST }}
          VITE_STAGE: ${{ env.STAGE }}
          VITE_CI: true
          VITE_DB_NAME: ${{ steps.sst-output.outputs.database }}
          VITE_DB_SECRET_ARN: ${{ steps.sst-output.outputs.secretArn }}
          VITE_DB_INSTANCE_ARN: ${{ steps.sst-output.outputs.instanceArn }}
